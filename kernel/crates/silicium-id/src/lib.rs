#![cfg_attr(not(test), no_std)]
#![feature(const_mut_refs)]

use bitmap::Bitmap;

/// A generator for unique identifiers.
///
/// # Warning
/// In order to store the state of the generator, it is necessary to create a
/// bitmap with the same size as the generator. Depending on the size of the
/// generator, this can be very memory expensive, *and can even lead to a
/// stack overflow due to the small size of the stack of the kernel*.
/// It is recommended to store the generator in a static variable, or to use
/// the `alloc` crate to allocate the bitmap on the heap.
#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct Generator<const N: usize> {
    bitmap: Bitmap<N>,
    last: usize,
}

impl<const N: usize> Generator<N> {
    /// Create a new generator with all identifiers available.
    #[must_use]
    pub const fn new() -> Self {
        Self {
            bitmap: Bitmap::zeroes(),
            last: 0,
        }
    }

    /// Generate a new identifier.
    #[must_use]
    pub const fn generate(&mut self) -> Option<Identifier> {
        if let Some(id) = self.bitmap.get_next_one(self.last) {
            self.last = id;
            Some(Identifier::new(id))
        } else {
            None
        }
    }

    /// Release an identifier generated by the generator.
    ///
    /// # Panics
    /// Panic if the identifier is out of range or if it is not in use.
    #[allow(clippy::needless_pass_by_value)]
    pub const fn release(&mut self, id: Identifier) {
        assert!(id.0 < N && self.bitmap.get(id.0));
        self.bitmap.clear(id.0);
    }
}

impl<const N: usize> Default for Generator<N> {
    fn default() -> Self {
        Self::new()
    }
}

/// An identifier.
#[derive(Debug, Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct Identifier(pub usize);

impl Identifier {
    /// Create a new identifier.
    #[must_use]
    pub const fn new(id: usize) -> Self {
        Self(id)
    }

    /// Get the inner value of the identifier.
    #[must_use]
    pub const fn inner(&self) -> usize {
        self.0
    }
}
